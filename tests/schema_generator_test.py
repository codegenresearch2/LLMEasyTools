import pytest\nfrom typing import List, Optional, Union, Literal, Annotated\nfrom pydantic import BaseModel, Field, field_validator\n\nfrom llm_easy_tools import get_function_schema, LLMFunction\nfrom llm_easy_tools.schema_generator import parameters_basemodel_from_function, _recursive_purge_titles, get_name, get_tool_defs\nfrom pprint import pprint\n\n\ndef simple_function(count: int, size: Optional[float] = None):\n    '''simple function does something'''\n    pass\n\n\ndef simple_function_no_docstring(apple: Annotated[str, 'The apple'], banana: Annotated[str, 'The banana']):\n    pass\n\n\nclass Foo(BaseModel):\n    count: int\n    size: Optional[float] = None\n\n\nclass Bar(BaseModel):\n    '''Some Bar'''\n    apple: str = Field(description='The apple')\n    banana: str = Field(description='The banana')\n\n\nclass FooAndBar(BaseModel):\n    foo: Foo\n    bar: Bar\n\n\ndef nested_structure_function(foo: Foo, bars: List[Bar]):\n    '''spams everything'''\n    pass\n\n\nclass Reflection(BaseModel):\n    relevancy: str = Field(..., description='Whas the last retrieved information relevant and why?')\n    next_actions_plan: str = Field(..., description='What you plan to do next and why')\n\n\n# Test cases\n\n@pytest.mark.parametrize('function, expected_name, expected_description, expected_params', [\n    (simple_function, 'simple_function', 'simple function does something', {'count': 'integer', 'size': 'float'})\n]) \ndef test_function_schema(function, expected_name, expected_description, expected_params):\n    function_schema = get_function_schema(function)\n    assert function_schema['name'] == expected_name\n    assert function_schema['description'] == expected_description\n    params_schema = function_schema['parameters']\n    assert len(params_schema['properties']) == len(expected_params)\n    assert params_schema['type'] == 'object'\n    for param, expected_type in expected_params.items():\n        assert params_schema['properties'][param]['type'] == expected_type\n\n\ndef test_noparams():\n    def function_with_no_params():\n        '''This function has a docstring and takes no parameters.''' \n        pass\n    function_schema = get_function_schema(function_with_no_params)\n    assert function_schema['name'] == 'function_with_no_params'\n    assert function_schema['description'] == 'This function has a docstring and takes no parameters.'\n    assert function_schema['parameters'] == {}\n\n\ndef test_nested():\n    class Foo(BaseModel):\n        count: int\n        size: Optional[float] = None\n    class Bar(BaseModel):\n        '''Some Bar'''\n        apple: str = Field(description='The apple')\n        banana: str = Field(description='The banana')\n    class FooAndBar(BaseModel):\n        foo: Foo\n        bar: Bar\n    def nested_structure_function(foo: Foo, bars: List[Bar]):\n        '''spams everything'''\n        pass\n    function_schema = get_function_schema(nested_structure_function)\n    assert function_schema['name'] == 'nested_structure_function'\n    assert function_schema['description'] == 'spams everything'\n    assert len(function_schema['parameters']['properties']) == 2\n\n\ndef test_methods():\n    class ExampleClass:\n        def simple_method(self, count: int, size: Optional[float] = None):\n            '''simple method does something''' \n            pass\n    example_object = ExampleClass()\n    function_schema = get_function_schema(example_object.simple_method)\n    assert function_schema['name'] == 'simple_method'\n    assert function_schema['description'] == 'simple method does something'\n    params_schema = function_schema['parameters']\n    assert len(params_schema['properties']) == 2\n\n\ndef test_LLMFunction():\n    def new_simple_function(count: int, size: Optional[float] = None):\n        '''simple function does something''' \n        pass\n    func = LLMFunction(new_simple_function, name='changed_name')\n    function_schema = func.schema\n    assert function_schema['name'] == 'changed_name'\n    assert 'strict' not in function_schema or function_schema['strict'] == False\n    func = LLMFunction(simple_function, strict=True)\n    function_schema = func.schema\n    assert function_schema['strict'] == True\n\n\ndef test_merge_schemas():\n    class Reflection(BaseModel):\n        relevancy: str = Field(..., description='Whas the last retrieved information relevant and why?')\n        next_actions_plan: str = Field(..., description='What you plan to do next and why')\n    function_schema = get_function_schema(simple_function)\n    new_schema = insert_prefix(Reflection, function_schema)\n    assert new_schema['name'] == 'Reflection_and_simple_function'\n    assert len(new_schema['parameters']['properties']) == 4\n    assert len(new_schema['parameters']['required']) == 3\n    assert len(function_schema['parameters']['properties']) == 2\n    assert len(function_schema['parameters']['required']) == 1\n    param_names = list(new_schema['parameters']['properties'].keys())\n    assert param_names == ['relevancy', 'next_actions_plan', 'count', 'size']\n    function_schema = get_function_schema(simple_function)\n    new_schema = insert_prefix(Reflection, function_schema, case_insensitive=True)\n    assert new_schema['name'] == 'reflection_and_simple_function'\n\n\ndef test_noparams_function_merge():\n    def function_no_params():\n        pass\n    class Reflection(BaseModel):\n        relevancy: str = Field(..., description='Whas the last retrieved information relevant and why?')\n        next_actions_plan: str = Field(..., description='What you plan to do next and why')\n    function_schema = get_function_schema(function_no_params)\n    assert function_schema['name'] == 'function_no_params'\n    assert function_schema['parameters'] == {}\n    new_schema = insert_prefix(Reflection, function_schema)\n    assert len(new_schema['parameters']['properties']) == 2\n    assert new_schema['name'] == 'Reflection_and_function_no_params'\n\n\ndef test_model_init_function():\n    class User(BaseModel):\n        '''A user object''' \n        name: str\n        city: str\n    function_schema = get_function_schema(User)\n    assert function_schema['name'] == 'User'\n    assert function_schema['description'] == 'A user object'\n    assert len(function_schema['parameters']['properties']) == 2\n    assert len(function_schema['parameters']['required']) == 2\n    new_function = LLMFunction(User, name='extract_user_details')\n    assert new_function.schema['name'] == 'extract_user_details'\n    assert new_function.schema['description'] == 'A user object'\n    assert len(new_function.schema['parameters']['properties']) == 2\n    assert len(new_function.schema['parameters']['required']) == 2\n\n\ndef test_case_insensitivity():\n    class User(BaseModel):\n        '''A user object''' \n        name: str\n        city: str\n    function_schema = get_function_schema(User, case_insensitive=True)\n    assert function_schema['name'] == 'user'\n    assert get_name(User, case_insensitive=True) == 'user'\n\n\ndef test_function_no_type_annotation():\n    def function_with_missing_type(param):\n        return f'Value is {param}'\n    with pytest.raises(ValueError) as exc_info:\n        get_function_schema(function_with_missing_type)\n    assert str(exc_info.value) == 'Parameter \'param\' has no type annotation'\n\n\ndef test_pydantic_param():\n    class Query(BaseModel):\n        query: str\n        region: str\n    def search(query: Query):\n        ...\n    schema = get_tool_defs([search])\n    assert schema[0]['function']['name'] == 'search'\n    assert schema[0]['function']['description'] == ''\n    assert schema[0]['function']['parameters']['properties']['query']['$ref'] == '#/$defs/Query'\n\n\ndef test_strict():\n    class Address(BaseModel):\n        street: str\n        city: str\n    class Company(BaseModel):\n        name: str\n        speciality: str\n        addresses: List[Address]\n    def print_companies(companies: List[Company]):\n        ...\n    schema = get_tool_defs([print_companies], strict=True)\n    pprint(schema)\n    function_schema = schema[0]['function']\n    assert function_schema['name'] == 'print_companies'\n    assert function_schema['strict'] == True\n    assert function_schema['parameters']['additionalProperties'] == False\n    assert function_schema['parameters']['$defs']['Address']['additionalProperties'] == False\n    assert function_schema['parameters']['$defs']['Address']['properties']['street']['type'] == 'string'\n    assert function_schema['parameters']['$defs']['Company']['additionalProperties'] == False\n