import pytest\\\\nfrom typing import List, Optional, Union, Literal, Annotated\\\\\nfrom pydantic import BaseModel, Field, field_validator\\\\\n\\\\nfrom llm_easy_tools import get_function_schema, LLMFunction\\\\\nfrom llm_easy_tools.schema_generator import parameters_basemodel_from_function, _recursive_purge_titles, get_name, get_tool_defs\\\\\nfrom pprint import pprint\\\\\n\\\\ndef simple_function(count: int, size: Optional[float] = None):\\\\\n    """simple function does something"""\\\\\n    pass\\\\\n\\\\ndef simple_function_no_docstring(apple: Annotated[str, 'The apple'], banana: Annotated[str, 'The banana']):\\\\\n    pass\\\\\n\\\\nclass Foo(BaseModel):\\\\\n    count: int\\\\\n    size: Optional[float] = None\\\\\n\\\\nclass Bar(BaseModel):\\\\\n    """Some Bar"""\\\\\n    apple: str = Field(description="The apple")\\\\\n    banana: str = Field(description="The banana")\\\\\n\\\\nclass FooAndBar(BaseModel):\\\\\n    foo: Foo\\\\\n    bar: Bar\\\\\n\\\\ndef nested_structure_function(foo: Foo, bars: List[Bar]):\\\\\n    """spams everything"""\\\\\n    pass\\\\\n\\\\nclass Reflection(BaseModel):\\\\\n    relevancy: str = Field(..., description="Whas the last retrieved information relevant and why?")\\\\\n    next_actions_plan: str = Field(..., description="What you plan to do next and why")\\\\\n\\\\n# Test cases\\\\n\\\\ndef test_function_schema():\\\\\n    function_schema = get_function_schema(simple_function)\\\\\n    assert function_schema['name'] == 'simple_function'\\\\\n    assert function_schema['description'] == 'simple function does something'\\\\\n    params_schema = function_schema['parameters']\\\\\n    assert len(params_schema['properties']) == 2\\\\\n    assert params_schema['type'] == "object"\\\\\n    assert params_schema['properties']['count']['type'] == "integer"\\\\\n    assert 'size' in params_schema['properties']\\\\\n    assert 'title' not in params_schema\\\\\n    assert 'title' not in params_schema['properties']['count']\\\\\n    assert 'description' not in params_schema\\\\\n\\\\ndef test_noparams():\\\\\n    def function_with_no_params():\\\\\n        """\\\\